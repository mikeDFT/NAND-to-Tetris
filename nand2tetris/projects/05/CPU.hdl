// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=AIntruction);
	Not(in=AIntruction,		out=CInstruction);
	
	// destination for C instruction
	And(a=CInstruction, b=instruction[5], out=OutputToA);
	And(a=CInstruction, b=instruction[4], out=OutputToD);
	And(a=CInstruction, b=instruction[3], out=writeM); // writeM
	
	Mux16(a=instruction, b=ALUOutput, sel=OutputToA, out=AValue);
	
	Or(a=OutputToA, b=AIntruction, out=ChangeA);
	ARegister(in=AValue, load=ChangeA, out=AOut);
	DRegister(in=ALUOutput, load=OutputToD, out=DOut);
	
	Mux16(a=AOut, b=inM, sel=instruction[12], out=Y);
	
	And16(a=true, b=AOut, out[0..14]=addressM); // addressM
	
	ALU(
		x=DOut, y=Y,
		zx=instruction[11], nx=instruction[10],
		zy=instruction[9], ny=instruction[8],
		f=instruction[7], no=instruction[6],
		out=ALUOutput, zr=ZROut, ng=NGOut
	);
	
	And16(a=true, b=ALUOutput, out=outM); // outM
	
	// Jumps \\
	And(a=instruction[2], b=NGOut, out=jump1);
	And(a=instruction[1], b=ZROut, out=jump2);
	//NOR
	Or(a=ZROut, b=NGOut, out=negativeOrEqual);
	Not(in=negativeOrEqual, out=strictlyPositive);
	
	And(a=instruction[0], b=strictlyPositive, out=jump3);
	
	Or(a=jump1, b=jump2, out=jump1or2);
	Or(a=jump3, b=jump1or2, out=canJump);
	And(a=CInstruction, b=canJump, out=JUMP);
	
	PC(in=AOut, reset=reset, load=JUMP, inc=true, out[0..14]=pc);
}